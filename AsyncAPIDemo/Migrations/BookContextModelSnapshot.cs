// <auto-generated />
using System;
using AsyncAPIDemo.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AsyncAPIDemo.Migrations
{
    [DbContext(typeof(BookContext))]
    partial class BookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AsyncAPIDemo.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47e57a40-323d-4253-a788-b96025013e50"),
                            FirstName = "Agatha",
                            LastName = "Kristie"
                        },
                        new
                        {
                            Id = new Guid("a33a9a0f-98f8-45da-b4d2-08d95c406cb5"),
                            FirstName = "Paulo",
                            LastName = "Cohelo"
                        });
                });

            modelBuilder.Entity("AsyncAPIDemo.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2500)")
                        .HasMaxLength(2500);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("098a5bbf-4783-4c6d-8097-e0ff0f33c205"),
                            AuthorId = new Guid("47e57a40-323d-4253-a788-b96025013e50"),
                            Description = "Some Book",
                            Title = "Murder of Rozer Ackward"
                        },
                        new
                        {
                            Id = new Guid("bd479151-9426-49c1-b827-267a076164a8"),
                            AuthorId = new Guid("a33a9a0f-98f8-45da-b4d2-08d95c406cb5"),
                            Description = "Fiction Book",
                            Title = "Alchemist"
                        });
                });

            modelBuilder.Entity("AsyncAPIDemo.Entities.Book", b =>
                {
                    b.HasOne("AsyncAPIDemo.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
